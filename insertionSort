package Lecture17;

import java.util.*;

/*Insertion sort 
 * Start from index 1 first sort till index 1 then insert next element into its 
 * left sorted part
 * worst case time complexit :O(N^2)
 * Best case time complexity: O(N)
 * Stable algorithms
 * Used for smaller values of N
 * Good when array is partially sorted
 * 
 */
public class insertionSort {
    public static void main(String[] args) {
        int[] arr = { 1, 5, 4, 3, 2 };
        insertion(arr);
        System.out.println(Arrays.toString(arr));
    }

    static void insertion(int[] arr) {
        for (int i = 0; i <= arr.length - 2; i++) {
            for (int j = i + 1; j > 0; j--) {
                // Inserting element in left sorted part
                if (arr[j] < arr[j - 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = temp;
                }
            }
        }
    }

}
